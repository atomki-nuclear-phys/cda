// Dear emacs, this is -*- c++ -*-
// $Id$
#ifndef CDA_CORE_DEVICE_CRATE_ICC
#define CDA_CORE_DEVICE_CRATE_ICC

// Qt include(s):
#include <QtCore/QIODevice>
#include <QtCore/QDataStream>
#include <QtXml/QDomElement>

// Local include(s):
#include "Loader.h"

namespace dev {

   //
   // Make sure that the following Qt classes are available in the
   // current namespace even if Qt has been built in an arbitrary
   // namespace:
   //
   using QT_PREPEND_NAMESPACE( QIODevice );
   using QT_PREPEND_NAMESPACE( QDataStream );
   using QT_PREPEND_NAMESPACE( QDomElement );

   // Initialize the static member(s):
   template< class DEVICE >
   const char* Crate< DEVICE >::XML_NODE_NAME = "Crate";

   /**
    * The constructor expects a function pointer to one of the functions of
    * dev::Factory. The specified function will later on be used to create
    * the new device objects when reading a configuration. You should
    * construct the object something like this:
    *
    * <code>
    *   dev::Crate< dev::Hist >( &dev::Factory::createHist );
    * </code>
    *
    * @param factoryFncn Function pointer to one of dev::Factory's functions
    */
   template< class DEVICE >
   Crate< DEVICE >::Crate( const QString& type,
                           bool isTypeImportant )
      : m_devices(), m_loader( 0 ), m_type( type ),
        m_isTypeImportant( isTypeImportant ),
        m_logger( "dev::Crate" ) {

   }

   /**
    * The destructor clears the configuration before destroying the object,
    * so the handled devices wouldn't be leaked.
    */
   template< class DEVICE >
   Crate< DEVICE >::~Crate() {

      clear();
   }

   template< class DEVICE >
   bool Crate< DEVICE >::readConfig( QIODevice* dev ) {

      // Check that a correct loader is set:
      if( ! checkLoader() ) return false;

      REPORT_VERBOSE( tr( "Reading configuration from binary input" ) );

      clear();

      QDataStream input( dev );
      input.setVersion( QDataStream::Qt_4_0 );

      // Check if the configuration is of the right type:
      QString type;
      input >> type;
      if( ( type != m_type ) && m_isTypeImportant ) {
         REPORT_ERROR( tr( "Wrong type found in configuration (%1 != %2) "
                           "You may be reading a too old XML file, or "
                           "a configuration meant for a different application." )
                       .arg( type ).arg( m_type ) );
         return false;
      }

      quint32 nDevices;
      input >> nDevices;

      for( quint32 i = 0; i < nDevices; ++i ) {

         QString type;
         input >> type;

         if( m_loader->isLoaded( type ) ) {

            Factory* factory = m_loader->getFactory( type );
            DEVICE* device = factory->createDevice< DEVICE >();
            if( ! device ) {
               m_logger << msg::WARNING
                        << tr( "No implementation found for type %1" )
                  .arg( type )
                        << msg::endmsg;
               continue;
            }
            if( ! device->readConfig( dev ) ) {
               REPORT_ERROR( tr( "There was a problem reading the "
                                 "configuration of one of the devices!" ) );
               delete device;
               return false;
            }

            typename std::map< unsigned int, DEVICE* >::iterator it;
            if( ( it = m_devices.find( device->getID() ) ) !=
                m_devices.end() ) {
               m_logger << msg::WARNING
                        << tr( "Redefining the device with 'id': %1" )
                  .arg( device->getID() ) << msg::endmsg;
               delete it->second;
            }

            m_devices[ device->getID() ] = device;

         } else {
            REPORT_ERROR( tr( "Device type \"%1\" unknown.\n"
                              "Check that you have all plugins available!" )
                          .arg( type ) );
            return false;
         }

      }

      // Let the derived classes read in their specific configuration:
      if( ! readCrateConfig( dev ) ) {
         REPORT_ERROR( tr( "Failed to read crate specific configuration" ) );
         return false;
      }

      // Signal that the operation was successful:
      return true;
   }

   template< class DEVICE >
   bool Crate< DEVICE >::writeConfig( QIODevice* dev ) const {

      REPORT_VERBOSE( tr( "Writing configuration to binary output" ) );

      // Write the "header" of the configuration:
      QDataStream output( dev );
      output.setVersion( QDataStream::Qt_4_0 );
      output << m_type;
      output << ( quint32 ) m_devices.size();

      // Write the configuration of each device:
      typename std::map< unsigned int, DEVICE* >::const_iterator itr =
         m_devices.begin();
      typename std::map< unsigned int, DEVICE* >::const_iterator end =
         m_devices.end();
      for( ; itr != end; ++itr ) {

         output << itr->second->deviceName();
         if( ! itr->second->writeConfig( dev ) ) {
            REPORT_ERROR( tr( "There was a problem writing the "
                              "configuration of a device" ) );
            return false;
         }
      }

      // Let the derived classes write out their specific configuration:
      if( ! writeCrateConfig( dev ) ) {
         REPORT_ERROR( tr( "Failed to write crate specific configuration" ) );
         return false;
      }

      // Signal that the operation was successful:
      return true;
   }

   template< class DEVICE >
   bool Crate< DEVICE >::readConfig( const QDomElement& element ) {

      // Check that a correct loader is set:
      if( ! checkLoader() ) return false;

      REPORT_VERBOSE( tr( "Reading configuration from XML input" ) );

      // First of all, clear the current configuration:
      clear();

      // Find the element describing the crate:
      int crate_index = -1;
      for( int i = 0; i < element.childNodes().size(); ++i ) {

         if( ! element.childNodes().at( i ).isElement() ) {
            continue;
         }
         if( element.childNodes().at( i ).nodeName() == XML_NODE_NAME ) {
            crate_index = i;
            break;
         }
      }
      if( crate_index == -1 ) {
         REPORT_ERROR( tr( "Couldn't find crate element in XML. "
                           "You may be reading a too old XML file." ) );
         return false;
      }

      // Access the DOM element:
      const QDomElement crate_element =
         element.childNodes().at( crate_index ).toElement();

      // Check the type of the crate, if it's important:
      if( m_isTypeImportant ) {
         const QString type = crate_element.attribute( "Type", "" );
         if( type != m_type ) {
            REPORT_ERROR( tr( "Wrong type found in configuration "
                              "(\"%1\" != \"%2\") "
                              "You may be reading a too old XML file, or "
                              "a configuration meant for a different "
                              "application." )
                          .arg( type ).arg( m_type ) );
            return false;
         }
      }

      // Let the derived classes read in their specific configuration:
      if( ! readCrateConfig( crate_element ) ) {
         REPORT_ERROR( tr( "Failed to read crate specific configuration" ) );
         return false;
      }

      // Loop over all the elements inside the crate node:
      for( int i = 0; i < crate_element.childNodes().size(); ++i ) {

         // We are only interested in elements:
         if( ! crate_element.childNodes().at( i ).isElement() ) continue;

         // The type of the node describes the device type:
         const QString type = crate_element.childNodes().at( i ).nodeName();

         // Check whether we have a plugin for this type:
         if( ! m_loader->isLoaded( type ) ) {
            REPORT_ERROR( tr( "Device type \"%1\" unknown\n"
                              "Check that you have all plugins available!" )
                          .arg( type ) );
            return false;
         }

         // If we do, let's try loading the configuration:
         Factory* factory = m_loader->getFactory( type );
         DEVICE* device = factory->createDevice< DEVICE >();
         if( ! device ) {
            m_logger << msg::WARNING
                     << tr( "No implementation found for type %1" )
               .arg( type )
                     << msg::endmsg;
            continue;
         }
         const QDomElement conf =
            crate_element.childNodes().at( i ).toElement();
         if( ! device->readConfig( conf ) ) {
            REPORT_ERROR( tr( "There was a problem reading the "
                              "configuration of one of the devices!" ) );
            delete device;
            return false;
         }

         // Add this new device to the crate:
         typename std::map< unsigned int, DEVICE* >::iterator it;
         if( ( it = m_devices.find( device->getID() ) ) !=
             m_devices.end() ) {
            m_logger << msg::WARNING
                     << tr( "Redefining the device with 'id': %1" )
               .arg( device->getID() )
                     << msg::endmsg;
            delete it->second;
         }
         m_devices[ device->getID() ] = device;

      }

      // Signal that the operation was successful:
      return true;
   }

   template< class DEVICE >
   bool Crate< DEVICE >::writeConfig( QDomElement& element ) const {

      REPORT_VERBOSE( tr( "Writing configuration to XML output" ) );

      // Create a top level element for the whole crate:
      QDomElement crate_element =
         element.ownerDocument().createElement( XML_NODE_NAME );
      crate_element.setAttribute( "Type", m_type );

      // Let the derived classes write out their specific configuration:
      if( ! writeCrateConfig( crate_element ) ) {
         REPORT_ERROR( tr( "Failed to write crate specific configuration" ) );
         return false;
      }

      // Add the crate node to the configuration:
      element.appendChild( crate_element );

      // Loop over the devices, and add their configuration to the
      // crate node:
      typename std::map< unsigned int, DEVICE* >::const_iterator itr =
         m_devices.begin();
      typename std::map< unsigned int, DEVICE* >::const_iterator end =
         m_devices.end();
      for( ; itr != end; ++itr ) {

         QDomElement dev_element =
            element.ownerDocument().createElement( itr->second->deviceName() );
         if( ! itr->second->writeConfig( dev_element ) ) {
            REPORT_ERROR( tr( "There was a problem writing the "
                              "configuration of a device" ) );
            return false;
         }
         crate_element.appendChild( dev_element );

      }

      // Signal that the operation was successful:
      return true;
   }

   template< class DEVICE >
   bool Crate< DEVICE >::canRead( QIODevice* dev ) const {

      // If the type is not important, then the answer is always
      // yes:
      if( ! m_isTypeImportant ) return true;

      QDataStream input( dev );
      input.setVersion( QDataStream::Qt_4_0 );

      // Check if the configuration is of the right type:
      QString type;
      input >> type;
      if( type == m_type ) {
         return true;
      } else {
         return false;
      }
   }

   template< class DEVICE >
   bool Crate< DEVICE >::canRead( const QDomElement& element ) const {

      // If the type is not important, then the answer is always
      // yes:
      if( ! m_isTypeImportant ) return true;

      // Find the element describing the crate:
      int crate_index = -1;
      for( int i = 0; i < element.childNodes().size(); ++i ) {

         if( ! element.childNodes().at( i ).isElement() ) {
            continue;
         }
         if( element.childNodes().at( i ).nodeName() == XML_NODE_NAME ) {
            crate_index = i;
            break;
         }
      }
      if( crate_index == -1 ) {
         REPORT_ERROR( tr( "Couldn't find crate element in XML. "
                           "You may be reading a too old XML file." ) );
         return false;
      }

      // Access the DOM element:
      const QDomElement crate_element =
         element.childNodes().at( crate_index ).toElement();

      // Read the crate type:
      const QString type = crate_element.attribute( "Type", "" );

      // Now check it:
      if( type == m_type ) {
         return true;
      } else {
         return false;
      }
   }

   template< class DEVICE >
   Loader* Crate< DEVICE >::getLoader() const {

      return m_loader;
   }

   /**
    * A correctly configured dev::Loader object is used by the class to access
    * the dev::Factory objects for each supported CAMAC device. It is not
    * possible to load a configuration without giving such a dev::Loader object
    * to the class, so it should be done just after creating the object.
    *
    * @param loader Pointer to a correctly configured dev::Loader object
    */
   template< class DEVICE >
   void Crate< DEVICE >::setLoader( const Loader* loader ) {

      m_loader = loader;
      return;
   }

   /**
    * The function deletes all the device objects and resets the map storing
    * them.
    */
   template< class DEVICE >
   void Crate< DEVICE >::clear() {

      for( typename std::map< unsigned int, DEVICE* >::iterator device_it =
              m_devices.begin(); device_it != m_devices.end();
           ++device_it ) {
         delete device_it->second;
      }
      m_devices.clear();

      return;
   }

   /**
    * The function doesn't do much for the moment, it just checks that the
    * pointer to the dev::Loader object is not a null-pointer. It could be
    * made smarter later on...
    *
    * @returns <code>true</code> if a correct dev::Loader is set,
    *          <code>false</code> otherwise
    */
   template< class DEVICE >
   bool Crate< DEVICE >::checkLoader() const {

      if( ! m_loader ) {
         REPORT_ERROR( tr( "No functional dev::Loader object specified yet\n"
                           "Configuration reading is not possible like this!" ) );
         return false;
      }

      return true;
   }

   template< class DEVICE >
   bool Crate< DEVICE >::readCrateConfig( QIODevice* ) {

      return true;
   }

   template< class DEVICE >
   bool Crate< DEVICE >::writeCrateConfig( QIODevice* ) const {

      return true;
   }

   template< class DEVICE >
   bool Crate< DEVICE >::readCrateConfig( const QDomElement& ) {

      return true;
   }

   template< class DEVICE >
   bool Crate< DEVICE >::writeCrateConfig( QDomElement& ) const {

      return true;
   }

} // namespace dev

#endif // CDA_CORE_DEVICE_CRATE_ICC
